call _HAS_DEFAULT_OUT()

# Wildcard binding
call MAP_PRODUCER(
    * = self,
)

call MAP_EXAMPLE as MAP_EXAMPLE2(
    foo = {},
)

# Call with stage output binding
call ADD_KEY2(
    key      = self.key2,
    value    = self.value2,
    failfile = "fail2",
    start    = ADD_KEY1.result,
)

call ADD_KEY5 as ADD_KEY6(
    key   = "6",
    value = [
        "six",
        "seven",
    ],
)

call MERGE_JSON2(
    input = [ADD_KEY3.result],
)

call MERGE_JSON2 as MERGE_JSON3(
    input = ADD_KEY4.result,
)

call MERGE_JSON2 as MERGE_JSON4(
    input = [
        "four",
        ADD_KEY3.result,
    ],
)

call MERGE_JSON2 as MERGE_JSON5(
    input = [],
)

call STRUCT_CONSUMER(
    foo   = self.struct_in,
    y     = self.struct_in.point.y,
    xarr  = null,
    point = self.struct_in.point,
)

call STRUCT_CONSUMER as CANIBAL_1(
    foo   = STRUCT_CONSUMER,
    y     = STRUCT_CONSUMER.y,
    xarr  = STRUCT_CONSUMER.arr.x,
    point = STRUCT_CONSUMER.point,
)

call STRUCT_CONSUMER as CANIBAL_2(
    foo   = STRUCT_CONSUMER.extra,
    y     = STRUCT_CONSUMER.extra.point.y,
    xarr  = STRUCT_CONSUMER.arr.x,
    point = STRUCT_CONSUMER.extra.point,
)

call MAP_PRODUCER(
    input = STRUCT_CONSUMER,
)

call PRODUCER_CONSUMER(
    foo = 1,
    *   = MAP_PRODUCER,
)

call POINT_CONSUMER(
    * = MAP_PRODUCER.flat_map,
)

call MAP_CONSUMER(
    foo1               = {
        "item": STRUCT_CONSUMER,
    },
    foo2               = MAP_PRODUCER.flat_map,
    point_array        = MAP_PRODUCER.array.point,
    map_of_array       = MAP_PRODUCER.flat_map.y,
    array_2d           = MAP_PRODUCER.array.y,
    map_of_float_array = MAP_PRODUCER.map_of_array.x,
    array_of_float_map = MAP_PRODUCER.array_of_map.x,
)

# Standard call with null binding
call ADD_KEY1(
    key      = self.key1,
    value    = self.value1,
    # Comments can go on arguments as well.
    failfile = "fail \n\"1\"",
    start    = null,
) using (
    local = true,
)

# Call with map binding and resources
call MAP_EXAMPLE(
    foo = {
        "bar": "baz",
        # Comments inside a map expression.
        "bing": null,
        "blarg": {
            # Deeper inside comments.
            "n": 2,
        },
    },
) using (
    # ADD_KEY3 can disable this stage.
    disabled = ADD_KEY3.disable_example,
    local    = true,
    # This shouldn't be volatile because reasons.
    volatile = false,
)

call ADD_KEY5(
    key   = "5",
    value = ["five"],
) using (
    volatile = true,
)





call PARAMETER_ALIGNMENT as ALIGN2(
    longer_name_first            = 4.5,
    short_name                   = [
        1,
        2,
    ],
    very_long_name_to_align_with = 2,
    stuff                        = {
        a:                             [],
        d2:                            1,
        d3_is_a_file_with_a_long_name: "",
        ia: [
            1,
            2,
        ],
        m: {
            "x": 1,
        },
    },
) using (
    local = true,
)



map call ADD_KEY1 as ADD_KEY4(
    key      = "4",
    # We'll run this twice.
    value    = split [
        # Comments inside an array expression.
        # Sometimes the comments are multi-line.
        "four",
        "feir",
    ],
    failfile = "fail4",
    start    = ADD_KEY2.result,
)

map call ADD_KEY5 as ADD_KEY7(
    key   = split ADD_KEY5.value,
    value = null,
)

map call MERGE_JSON(
    json1 = ADD_KEY3.result,
    json2 = split ADD_KEY4.result,
)

map call PARAMETER_ALIGNMENT as ALIGN1(
    longer_name_first            = split [2.3],
    short_name                   = [1],
    very_long_name_to_align_with = 2,
    stuff                        = {
        a:                             [ADD_KEY3.disable_example],
        d2:                            1,
        d3_is_a_file_with_a_long_name: "",
        ia:                            [],
        m:                             {},
    },
) using (
    preflight = true,
)

# Calls the pipelines, splitting over two forks.
map call AWESOME(
    key1      = "1",
    value1    = "one",
    key2      = "2",
    value2    = split [
        "two",
        "deux",
    ],
    struct_in = {
        dest: "foo.json",
        point: {
            x: 1.5,
            y: [
                2,
                3,
            ],
        },
    },
)