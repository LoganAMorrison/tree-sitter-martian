================================================================================
Map Call
================================================================================


stage SQUARE(
    in  float value,
    out float square,
    src comp  "square",
)

stage SUM(
    in  float[] values,
    out float   sum,
    src comp    "sum",
)

pipeline SUM_SQUARES(
    in  float[] values,
    out float   sum,
)
{
    map call SQUARE(
        value = split self.values,
    )

    call SUM(
        values = SQUARE.square,
    )

    return (
        value = SUM.sum,
    )
}

--------------------------------------------------------------------------------

(source_file
  (stage_definition
    name: (identifier)
    params: (parameter_list
      (input_parameter
        type: (parameter_type
          (primitive_type))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (primitive_type))
        name: (identifier)))
    src: (source_declaration
      type: (source_type)
      source_path: (string_literal)))
  (stage_definition
    name: (identifier)
    params: (parameter_list
      (input_parameter
        type: (parameter_type
          (array_type
            value_type: (parameter_type
              (primitive_type))))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (primitive_type))
        name: (identifier)))
    src: (source_declaration
      type: (source_type)
      source_path: (string_literal)))
  (pipeline_definition
    name: (identifier)
    params: (parameter_list
      (input_parameter
        type: (parameter_type
          (array_type
            value_type: (parameter_type
              (primitive_type))))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (primitive_type))
        name: (identifier)))
    calls: (call_statement_list
      (call_statement
        name: (identifier)
        params: (binding_list
          (binding
            target: (binding_target
              (identifier))
            value: (expression
              (reference_expression
                (reference_list
                  field: (identifier)))))))
      (call_statement
        name: (identifier)
        params: (binding_list
          (binding
            target: (binding_target
              (identifier))
            value: (expression
              (reference_expression
                (reference_list
                  (scoped_identifier
                    value: (identifier)
                    field: (identifier)))))))))
    return: (return_statement
      (binding_list
        (binding
          target: (binding_target
            (identifier))
          value: (expression
            (reference_expression
              (reference_list
                (scoped_identifier
                  value: (identifier)
                  field: (identifier))))))))))
