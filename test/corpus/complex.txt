================================================================================
Complex
================================================================================

@include "pipeline.mro"

filetype txt;

stage STAGE1(
  in txt file,
  out txt outfile,
  src comp "comp",
)

stage STAGE2(
  in txt file,
  out float[] floats,
  src py "comp",
)

pipeline MY_PIPE(
  in txt file,
  out float[] floats,
)
{

  call STAGE1(
    file = self.file,
  )
  call STAGE2(
    file = STAGE1.file,
  )

  return(
    floats = STAGE2.floats,
  )

}

call MY_PIPE(
    file = "/home/duplicator_dave/unsorted.txt",
)

--------------------------------------------------------------------------------

(source_file
  (includes
    (include
      include: (string)))
  (filetype_statement
    filetype: (identifier))
  (stage_expression
    name: (identifier)
    parameters: (stage_parameters
      (input_parameter
        type: (type
          (identifier))
        name: (identifier))
      (output_parameter
        type: (type
          (identifier))
        help: (identifier))
      (source
        type: (src_lang)
        file: (string))))
  (stage_expression
    name: (identifier)
    parameters: (stage_parameters
      (input_parameter
        type: (type
          (identifier))
        name: (identifier))
      (output_parameter
        type: (type)
        help: (identifier))
      (source
        type: (src_lang)
        file: (string))))
  (pipeline_expression
    name: (identifier)
    parameters: (pipeline_parameters
      (input_parameter
        type: (type
          (identifier))
        name: (identifier))
      (output_parameter
        type: (type)
        help: (identifier)))
    (call_expression
      name: (identifier)
      (bindings
        (bind
          name: (identifier)
          value: (identifier))))
    (call_expression
      name: (identifier)
      (bindings
        (bind
          name: (identifier)
          value: (identifier)
          value: (identifier))))
    (return
      (bindings
        (bind
          name: (identifier)
          value: (identifier)
          value: (identifier)))))
  (call_expression
    name: (identifier)
    (bindings
      (bind
        name: (identifier)
        value: (string)))))
