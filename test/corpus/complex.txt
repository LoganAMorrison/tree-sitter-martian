================================================================================
Complex
================================================================================

@include "pipeline.mro"

filetype txt;

stage STAGE1(
  in txt file,
  out txt outfile,
  src comp "comp",
)

stage STAGE2(
  in txt file,
  out float[] floats,
  src py "comp",
)

pipeline MY_PIPE(
  in txt file,
  out float[] floats,
)
{

  call STAGE1(
    file = self.file,
  )
  call STAGE2(
    file = STAGE1.file,
  )

  return(
    floats = STAGE2.floats,
  )

}

call MY_PIPE(
    file = "/home/duplicator_dave/unsorted.txt",
)

--------------------------------------------------------------------------------

(source_file
  (include_statement
    include: (string))
  (filetype_declaration
    (filetype))
  (stage_declaration
    name: (identifier)
    body: (stage_body
      (parameter_list
        (input_parameter
          type: (parameter_type
            (filetype))
          name: (identifier))
        (output_parameter
          type: (parameter_type
            (filetype))
          name: (identifier)))
      (source_declaration
        (source_type)
        source_path: (string))))
  (stage_declaration
    name: (identifier)
    body: (stage_body
      (parameter_list
        (input_parameter
          type: (parameter_type
            (filetype))
          name: (identifier))
        (output_parameter
          type: (parameter_type
            (filetype))
          name: (identifier)))
      (source_declaration
        (source_type)
        source_path: (string))))
  (pipeline_declaration
    name: (identifier)
    (parameter_list
      (input_parameter
        type: (parameter_type
          (filetype))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (filetype))
        name: (identifier)))
    (call_statement
      name: (identifier)
      (call_body
        (binding_statement
          target: (identifier)
          value: (scoped_identifier
            name: (identifier)))))
    (call_statement
      name: (identifier)
      (call_body
        (binding_statement
          target: (identifier)
          value: (scoped_identifier
            path: (identifier)
            name: (identifier)))))
    (return_statement
      (binding_statement
        target: (identifier)
        value: (scoped_identifier
          path: (identifier)
          name: (identifier)))))
  (call_statement
    name: (identifier)
    (call_body
      (binding_statement
        target: (identifier)
        value: (string)))))
