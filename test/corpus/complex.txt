================================================================================
Complex
================================================================================

@include "pipeline.mro"

filetype txt;

stage STAGE1(
  in txt file,
  out txt outfile,
  src comp "comp",
)

stage STAGE2(
  in txt file,
  out float[] floats,
  src py "comp",
)

pipeline MY_PIPE(
  in txt file,
  out float[] floats,
)
{

  call STAGE1(
    file = self.file,
  )
  call STAGE2(
    file = STAGE1.file,
  )

  return(
    floats = STAGE2.floats,
  )

}

call MY_PIPE(
    file = "/home/duplicator_dave/unsorted.txt",
)

--------------------------------------------------------------------------------

(source_file
  (include_statement
    file: (string_literal))
  (filetype_declaration
    filetype: (identifier))
  (stage_definition
    name: (identifier)
    params: (parameter_list
      (input_parameter
        type: (parameter_type
          (identifier))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (identifier))
        name: (identifier)))
    src: (source_declaration
      type: (source_type)
      source_path: (string_literal)))
  (stage_definition
    name: (identifier)
    params: (parameter_list
      (input_parameter
        type: (parameter_type
          (identifier))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (array_type
            value_type: (parameter_type
              (primitive_type))))
        name: (identifier)))
    src: (source_declaration
      type: (source_type)
      source_path: (string_literal)))
  (pipeline_definition
    name: (identifier)
    params: (parameter_list
      (input_parameter
        type: (parameter_type
          (identifier))
        name: (identifier))
      (output_parameter
        type: (parameter_type
          (array_type
            value_type: (parameter_type
              (primitive_type))))
        name: (identifier)))
    calls: (call_statement_list
      (call_statement
        name: (identifier)
        params: (binding_list
          (binding
            target: (binding_target
              (identifier))
            value: (expression
              (reference_expression
                (reference_list
                  field: (identifier)))))))
      (call_statement
        name: (identifier)
        params: (binding_list
          (binding
            target: (binding_target
              (identifier))
            value: (expression
              (reference_expression
                (reference_list
                  (scoped_identifier
                    value: (identifier)
                    field: (identifier)))))))))
    return: (return_statement
      (binding_list
        (binding
          target: (binding_target
            (identifier))
          value: (expression
            (reference_expression
              (reference_list
                (scoped_identifier
                  value: (identifier)
                  field: (identifier)))))))))
  (call_statement
    name: (identifier)
    params: (binding_list
      (binding
        target: (binding_target
          (identifier))
        value: (expression
          (literal
            (string_literal)))))))
